networks:
  proxy_net:
    name: ${NETWORK_NAME:-proxy_net}
    driver: bridge

services:
  nginx-proxy:
    container_name: nginx-proxy
    image: nginxproxy/nginx-proxy
    # image: nginx:alpine
    labels: # for acme-companion (fallback from acme env vars IDs)
            # also better for dynamically named containers
      com.github.nginx-proxy.nginx: "true"
    networks:
      - proxy_net
    dns:
     - 1.1.1.1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro

      - ./nginx/data/conf.d:/etc/nginx/conf.d
      - ./nginx/data/vhost:/etc/nginx/vhost.d
      - ./nginx/data/html:/usr/share/nginx/html
      - ./nginx/data/certs:/etc/nginx/certs:ro
      - ./nginx/cache:/var/cache/nginx:rw
      # - ./auth/.htpasswd:/etc/nginx/.htpasswd:ro

    environment:
      DHPARAM_SKIP: false
      SSL_POLICY: Mozilla-Intermediate
      TRUST_DOWNSTREAM_PROXY: false # true if behind trusted proxy:
      # https://github.com/nginx-proxy/nginx-proxy#trusting-downstream-proxy-headers
    restart: always
    healthcheck: # if nginx config is valid and nginx is running
      test: ["CMD-SHELL", "nginx -t && ps -C nginx >/dev/null || exit 1"]
      interval: 1m30s
      timeout: 5s
      retries: 3
      start_period: 5m


  acme-companion:
    container_name: acme-companion
    image: nginxproxy/acme-companion
    restart: unless-stopped
    depends_on:
      # - docker-gen
      - nginx-proxy
    volumes_from:
      - nginx-proxy
    volumes:
      # shared with nginx:
      - ./nginx/data/conf.d:/etc/nginx/conf.d
      - ./nginx/data/vhost:/etc/nginx/vhost.d
      - ./nginx/data/html:/usr/share/nginx/html
      - ./nginx/data/certs:/etc/nginx/certs:rw

      - ./nginx/acme:/etc/acme.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy_net
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      # For multisetup:
      # NGINX_DOCKER_GEN_CONTAINER: docker-gen
      DEFAULT_EMAIL: ${ACME_CERT_NOTIFICATION_EMAIL}

      # Test letsencypt server:
      # https://github.com/nginx-proxy/acme-companion/blob/main/docs/Container-configuration.md#optional-container-environment-variables-for-custom-configuration
      # ACME_CA_URI: https://acme-staging-v02.api.letsencrypt.org/directory
      # DEBUG: 1

    healthcheck: # if certs for virtual host available
      test: ["CMD-SHELL", "ls /etc/nginx/certs/${VIRTUAL_HOST}* >/dev/null || exit 1"]
      interval: 1m30s
      timeout: 5s
      retries: 3
      start_period: 2m

# ================================================== #

  imgproxy:
    container_name: imgproxy
    image: "docker.imgproxy.pro/imgproxy:v3.21.0-ml"
    # image: "darthsim/imgproxy:latest"
    networks:
      - proxy_net
    expose:
      - 8080
    # stdin_open: true
    # tty: true

    healthcheck:
      test: [ "CMD", "imgproxy", "health" ]
      timeout: 10s
      interval: 10s
      retries: 3

    restart: always

    logging:
          driver: json-file
          options:
            max-size: "15m"
            max-file: "4"

    environment:
      IMGPROXY_BASE_URL: "http://proxy-manager:8000/fetch-image?url="

      VIRTUAL_HOST: ${VIRTUAL_HOST}
      VIRTUAL_PORT: 8080

      IMGPROXY_LICENSE_KEY: ${IMGPROXY_LICENSE_KEY}
      IMGPROXY_SMART_CROP_ADVANCED: true
      IMGPROXY_SMART_CROP_FACE_DETECTION: true

      LETSENCRYPT_HOST: ${VIRTUAL_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}

      # [https://docs.imgproxy.net/configuration/options]
      IMGPROXY_KEY: ${IMGPROXY_KEY}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      # IMGPROXY_SIGNATURE_SIZE: 128
      # IMGPROXY_BIND: ${IMGPROXY_PORT}  # default: ":8080"
      IMGPROXY_NETWORK: tcp
      IMGPROXY_READ_TIMEOUT: 10
      IMGPROXY_WRITE_TIMEOUT: 10
      IMGPROXY_DOWNLOAD_TIMEOUT: 5
      IMGPROXY_WORKERS: ${IMGPROXY_WORKERS}
      # IMGPROXY_REQUESTS_QUEUE_SIZE: 1000
      IMGPROXY_MAX_SRC_RESOLUTION: 32
      IMGPROXY_IGNORE_SSL_VERIFICATION: true
      # IMGPROXY_SOURCE_URL_ENCRYPTION_KEY: ${URL_ENCRYPTION_KEY}

      #IMGPROXY_QUALITY: 100
      IMGPROXY_JPEG_PROGRESSIVE: true
      IMGPROXY_PNG_INTERLACED: true

      # IMGPROXY_PREFERRED_FORMATS: jpeg,png,gif  # default: jpeg,png,gif
      # IMGPROXY_SKIP_PROCESSING_FORMATS:  # coma sep list

      # IMGPROXY_FALLBACK_IMAGE_URL:

      # IMGPROXY_ENABLE_DEBUG_HEADERS: true

      IMGPROXY_ENABLE_WEBP_DETECTION: false
      IMGPROXY_ENABLE_AVIF_DETECTION: false

      # [https://docs.imgproxy.net/monitoring/prometheus]
      # IMGPROXY_PROMETHEUS_BIND:
      # IMGPROXY_PROMETHEUS_NAMESPACE:

      # Sentry
      # IMGPROXY_SENTRY_DSN:
      # IMGPROXY_SENTRY_ENVIRONMENT: # default: production
      # IMGPROXY_SENTRY_RELEASE: # default: imgproxy@{imgproxy version}

    depends_on:
      - proxy-manager


  proxy-manager:
    build: ./proxy_manager
    environment:
      IMGPROXY_PROXY_USERNAME: ${IMGPROXY_PROXY_USERNAME}
      IMGPROXY_PROXY_PASSWORD: ${IMGPROXY_PROXY_PASSWORD}
      IMGPROXY_PROXY_HOST: ${IMGPROXY_PROXY_HOST}
      IMGPROXY_PROXY_PORT: ${IMGPROXY_PROXY_PORT}
    networks:
      - proxy_net
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    entrypoint: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]